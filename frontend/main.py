import streamlit as st
import requests
from streamlit_cookies_controller import CookieController
import stripe
from jwt_parse import UtilsService
from datetime import datetime

API_URL = "http://app:8000/api/v1"

STRIPE_PUBLISHABLE_KEY = "pk_test_51QYvHtFsQfGGW0ICJbQdHSsTU3OFs7lHnUYtvzT3gO0GIVwwBD3MzhCJeWuEGFaUVocBVoVSUWtB0pydoRDikpJE00UspV4tuz"
stripe.api_key = "sk_test_51QYvHtFsQfGGW0ICxy4d4fUd7wy8gYzrdf2KMBGQrIaltvoB81bys1rkgL3ZpYs5g3SUqipUg4zmYe6Q7JA6DkIM00hGhIn3ED"
MONTHLY_PLAN_ID = "price_1QYvQSFsQfGGW0IC3wOIIJOD" 
YEARLY_PLAN_ID = "price_1QYvRJFsQfGGW0ICYmx4P55I" 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫—É–∫–æ–≤
controller = CookieController()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    email = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        user_data = {
            "email": email,
            "password": password,
            "role": "partner"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–∞–∫ 'partner'
        }
        response = requests.post(f"{API_URL}/user/register", json=user_data)
        if response.status_code == 201:
            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_token():
    st.title("–í—Ö–æ–¥")

    username = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        data = {
            "username": username,
            "password": password
        }
        response = requests.post(f"{API_URL}/user/token", data=data)
        if response.status_code == 200:
            token = response.json().get("access_token")
            st.success(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
            controller.set("jwt_token", token)
            st.session_state.token = token
            st.rerun()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def check_authorization(token):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{API_URL}/user/login", headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
def logout():
    controller.remove("jwt_token")
    st.session_state.token = None
    st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    st.rerun()

def profile_page():
    st.title("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    token = controller.get("jwt_token")
    if token:
        credentials = UtilsService.decode_jwt(token)
        user_id = credentials.get("user_id")
        if not user_id:
            st.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_URL}/user/{user_id}/role", headers=headers)

        if response.status_code == 200:
            user_data = response.json()
            
            with st.container():
                st.write(f"**Email:** {user_data['email']}")

                if user_data['role'] == 'premium':
                    st.markdown(
                        """
                        <span style="color: gold; font-weight: bold; font-size: 18px;">
                            –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: premium
                        </span>
                        """,
                        unsafe_allow_html=True,
                    )
                else:
                    st.write(f"**–†–æ–ª—å:** {user_data['role']}")
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {response.text}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
def upload_csv_file():
    token = controller.get("jwt_token")
    if token:
        st.title("–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Streamlit
        csv_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])

        if csv_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            headers = {"Authorization": f"Bearer {token}"}
            files = {"file": csv_file.getvalue()}

            response = requests.post(f'{API_URL}/session/upload_csv', headers=headers, files=files)

            if response.status_code == 201:
                st.success("–°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.text}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def my_sessions():
    token = controller.get("jwt_token")
    if token:
        st.title("–ú–æ–∏ —Å–µ—Å—Å–∏–∏")
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_URL}/session/my_sessions", headers=headers)

        if response.status_code == 200:
            sessions = response.json()
            if not sessions:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Å—Å–∏–π.")
            else:
                for session in sessions:
                    prediction = session.get("prediction", 0.0)
                    session_owner = session.get("session_owner", "–ù–µ —É–∫–∞–∑–∞–Ω")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    smilie = "üòÑ" if prediction < 0.3 else "üòê" if prediction < 0.7 else "üò†"
                    st.write(f"Session ID: {session['id']}")
                    st.write(f"Prediction: {prediction:.2f} {smilie}")
                    st.write(f"Payload: {session['payload']}")
                    st.write(f"Owner: {session_owner}")  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    st.write("---")
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {response.text}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

def payment_page():
    token = controller.get("jwt_token")
    if token:
        st.title("–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏")

        plan = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", ["–ú–µ—Å—è—á–Ω–∞—è", "–ì–æ–¥–æ–≤–∞—è"])

        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–ª–∞–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                plan_id = MONTHLY_PLAN_ID if plan == "–ú–µ—Å—è—á–Ω–∞—è" else YEARLY_PLAN_ID

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                headers = {"Authorization": f"Bearer {token}"}
                credantions = UtilsService.decode_jwt(token)

                exp = credantions.get("exp")
                if exp and datetime.utcfromtimestamp(exp) < datetime.utcnow():
                    raise ValueError("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫.")
                user_id = int(credantions.get("user_id"))

                payload = {
                    "user_id": user_id,  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    "plan_id": plan_id,
                }

                response = requests.post(
                    f"{API_URL}/subscriptions/create",
                    headers=headers,
                    json=payload,
                )

                if response.status_code == 200:
                    checkout_url = response.json().get("checkout_url")
                    if checkout_url:
                        st.markdown(
                            f"""
                            <a href="{checkout_url}" target="_self">
                                <button style="background-color:green;color:white;padding:10px 15px;border:none;border-radius:5px;">
                                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
                                </button>
                            </a>
                            """,
                            unsafe_allow_html=True,
                        )
                        st.stop()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Streamlit
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")


# –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_subscriptions():
    token = controller.get("jwt_token")
    if token:
        st.title("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

        headers = {"Authorization": f"Bearer {token}"}
        credentials = UtilsService.decode_jwt(token)
        user_id = credentials.get("user_id")  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞

        # –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
        response = requests.get(f"{API_URL}/subscriptions/user/{user_id}", headers=headers)

        if response.status_code == 200:
            subscriptions = response.json()
            if not subscriptions:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            else:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                st.table([
                    {
                        "ID": sub["id"] + 1,
                        "–ü–ª–∞–Ω": sub["plan_id"],
                        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞": sub["start_date"],
                        "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è": sub["end_date"],
                    }
                    for sub in subscriptions
                ])
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {response.text}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

def success_page():
    st.title("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    st.write("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    session_id = st.experimental_get_query_params().get("session_id", [None])[0]
    if session_id:
        st.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        token = controller.get("jwt_token")
        if token:
            credentials = UtilsService.decode_jwt(token)
            user_id = credentials.get("user_id")
            headers = {"Authorization": f"Bearer {token}"}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = requests.get(f"{API_URL}/user/{user_id}/role", headers=headers)
            if response.status_code == 200:
                st.success("–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å.")

def is_authenticated():
    token = st.session_state.get("token") or controller.get("jwt_token")
    if not token:
        return False
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        credantions = UtilsService.decode_jwt(token)
        exp = credantions.get("exp")
        if exp and datetime.utcfromtimestamp(exp) < datetime.utcnow():
            return False
        return True
    except Exception:
        return False
    
def logout_if_expired():
    if not is_authenticated():
        token = controller.get("jwt_token")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É–∫–∞
        if token:
            controller.remove("jwt_token")
        st.session_state.pop("token", None)

import streamlit.components.v1 as components

def render_logout_button():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if is_authenticated():
        # –î–æ–±–∞–≤–ª—è–µ–º HTML-—Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
        st.markdown(
            """
            <style>
            .logout-button {
                position: fixed;
                top: 10px;
                right: 10px;
                z-index: 1000;
                background-color: #f44336;
                color: white;
                border: none;
                padding: 8px 16px;
                font-size: 14px;
                cursor: pointer;
                border-radius: 5px;
                box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
            }
            </style>
            """,
            unsafe_allow_html=True,
        )
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        if st.button("–í—ã–π—Ç–∏", key="logout_button", help="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏"):
            logout()

def main():
    logout_if_expired()
    render_logout_button()
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    authenticated = is_authenticated()

    # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if authenticated:
        selection = st.sidebar.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            ["–ü—Ä–æ—Ñ–∏–ª—å", "–ó–∞–≥—Ä—É–∑–∫–∞ CSV", "–ú–æ–∏ —Å–µ—Å—Å–∏–∏", "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏", "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç"]
        )
    else:
        selection = st.sidebar.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—Ö–æ–¥"]
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    query_params = st.query_params
    if "success" in query_params:
        success_page()
        return
    elif "cancel" in query_params:
        st.error("–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–µ–Ω—é
    if selection == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        register_user()
    elif selection == "–í—Ö–æ–¥":
        get_token()
    elif selection == "–ü—Ä–æ—Ñ–∏–ª—å":
        profile_page()
    elif selection == "–ó–∞–≥—Ä—É–∑–∫–∞ CSV":
        upload_csv_file()
    elif selection == "–ú–æ–∏ —Å–µ—Å—Å–∏–∏":
        my_sessions()
    elif selection == "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏":
        payment_page()
    elif selection == "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç":
        user_subscriptions()

if __name__ == "__main__":
    main()
