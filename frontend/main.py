import streamlit as st
import requests
from streamlit_cookies_controller import CookieController

API_URL = "http://localhost:8000/api/v1"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫—É–∫–æ–≤
controller = CookieController()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    email = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        user_data = {
            "email": email,
            "password": password,
            "role": "partner"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–∞–∫ 'partner'
        }
        response = requests.post(f"{API_URL}/user/register", json=user_data)
        if response.status_code == 201:
            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_token():
    st.title("–í—Ö–æ–¥")

    username = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        data = {
            "username": username,
            "password": password
        }
        response = requests.post(f"{API_URL}/user/token", data=data)
        if response.status_code == 200:
            token = response.json().get("access_token")
            st.success(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
            controller.set("jwt_token", token)
            st.session_state.token = token
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def check_authorization(token):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{API_URL}/user/login", headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
def logout():
    controller.remove("jwt_token")
    st.session_state.token = None
    st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    st.rerun()

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def profile_page():
    token = controller.get("jwt_token")
    if token:
        user_data = check_authorization(token)
        if user_data:
            st.title("–ü—Ä–æ—Ñ–∏–ª—å")
            st.write(f"Email: {user_data['email']}")
            st.write(f"–†–æ–ª—å: {user_data['role']}")
            if st.button("–í—ã—Ö–æ–¥"):
                logout()
        else:
            st.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
def upload_csv_file():
    token = controller.get("jwt_token")
    if token:
        st.title("–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Streamlit
        csv_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])

        if csv_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            headers = {"Authorization": f"Bearer {token}"}
            files = {"file": csv_file.getvalue()}

            response = requests.post(f'{API_URL}/session/upload_csv', headers=headers, files=files)

            if response.status_code == 201:
                st.success("–°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.text}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def my_sessions():
    token = controller.get("jwt_token")
    if token:
        st.title("–ú–æ–∏ —Å–µ—Å—Å–∏–∏")
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_URL}/session/my_sessions", headers=headers)

        if response.status_code == 200:
            sessions = response.json()
            if not sessions:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Å—Å–∏–π.")
            else:
                for session in sessions:
                    prediction = session.get("prediction", 0.0)
                    session_owner = session.get("session_owner", "–ù–µ —É–∫–∞–∑–∞–Ω")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    smilie = "üòÑ" if prediction < 0.3 else "üòê" if prediction < 0.7 else "üò†"
                    st.write(f"Session ID: {session['id']}")
                    st.write(f"Prediction: {prediction:.2f} {smilie}")
                    st.write(f"Payload: {session['payload']}")
                    st.write(f"Owner: {session_owner}")  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    st.write("---")
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {response.text}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

# –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
def main():
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    selection = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—Ö–æ–¥", "–ü—Ä–æ—Ñ–∏–ª—å", "–ó–∞–≥—Ä—É–∑–∫–∞ CSV", "–ú–æ–∏ —Å–µ—Å—Å–∏–∏"]
    )

    if selection == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        register_user()
    elif selection == "–í—Ö–æ–¥":
        get_token()
    elif selection == "–ü—Ä–æ—Ñ–∏–ª—å":
        profile_page()
    elif selection == "–ó–∞–≥—Ä—É–∑–∫–∞ CSV":
        upload_csv_file()
    elif selection == "–ú–æ–∏ —Å–µ—Å—Å–∏–∏":
        my_sessions()

if __name__ == "__main__":
    main()
